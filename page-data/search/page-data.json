{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"Feature typeORM에서 연관관계가 없는 테이블 간 join 하는 방법 Tables User 테이블 Payment 테이블 각 테이블은 연관관계를 설정하지 않았고, payment 테이블에서 userId를 저장할 수 있게 했습니다. Join case 모든 user에 대한 payment 정보를 조회하기 위해 join을 합니다. 동작한 query 리턴된 …","fields":{"slug":"/typeorm-join/"},"frontmatter":{"date":"May 12, 2024","title":"연관관계 없이 join","tags":["nestjs","typeorm","database"]},"rawMarkdownBody":"\n# Feature\n\ntypeORM에서 연관관계가 없는 테이블 간 join 하는 방법\n\n## Tables\n\n### User 테이블\n\n<img width=\"1166\" alt=\"user_table\" src=\"https://github.com/EeeasyCode/nest-study/assets/92606611/f9416e58-37e1-4133-bdb5-b24399f40da9\">\n\n### Payment 테이블\n\n<img width=\"1179\" alt=\"payment_table\" src=\"https://github.com/EeeasyCode/nest-study/assets/92606611/06ef2ecf-9aaf-4b15-baa8-1f05877af87c\">\n\n각 테이블은 연관관계를 설정하지 않았고, payment 테이블에서 userId를 저장할 수 있게 했습니다.\n\n## Join case\n\n모든 user에 대한 payment 정보를 조회하기 위해 join을 합니다.\n\n```typescript\nasync leftJoin() {\n    return await this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndMapMany('user.payment', Payments, 'payment', 'user.id = payment.userId')\n      .getMany();\n}\n```\n\n### 동작한 query\n\n```shell\nquery: SELECT `user`.`id` AS `user_id`, `user`.`userEmail` AS `user_userEmail`, `user`.`password` AS `user_password`, `user`.`created_at` AS `user_created_at`, `user`.`updated_at` AS `user_updated_at`, `user`.`deleted_at` AS `user_deleted_at`, `payment`.`id` AS `payment_id`, `payment`.`userId` AS `payment_userId`, `payment`.`created_at` AS `payment_created_at`, `payment`.`updated_at` AS `payment_updated_at`, `payment`.`deleted_at` AS `payment_deleted_at` FROM `users` `user` LEFT JOIN `payments` `payment` ON  `user`.`id` = `payment`.`userId` AND `payment`.`deleted_at` IS NULL WHERE `user`.`deleted_at` IS NULL\n```\n\n### 리턴된 결과값\n\n```json\n[\n  {\n    \"id\": 1,\n    \"userEmail\": \"user1@example.com\",\n    \"password\": \"password123\",\n    \"created_at\": \"2024-05-06T16:08:37.000Z\",\n    \"updated_at\": \"2024-05-06T16:08:37.000Z\",\n    \"deleted_at\": null,\n    \"payment\": [\n      {\n        \"id\": 4,\n        \"userId\": 1,\n        \"created_at\": \"2024-05-06T16:10:18.000Z\",\n        \"updated_at\": \"2024-05-06T16:10:18.000Z\",\n        \"deleted_at\": null\n      },\n      {\n        \"id\": 1,\n        \"userId\": 1,\n        \"created_at\": \"2024-05-06T16:10:18.000Z\",\n        \"updated_at\": \"2024-05-06T16:10:18.000Z\",\n        \"deleted_at\": null\n      }\n    ]\n  },\n  {\n    \"id\": 2,\n    \"userEmail\": \"user2@example.com\",\n    \"password\": \"password123\",\n    \"created_at\": \"2024-05-06T16:08:37.000Z\",\n    \"updated_at\": \"2024-05-06T16:08:37.000Z\",\n    \"deleted_at\": null,\n    \"payment\": [\n      {\n        \"id\": 3,\n        \"userId\": 2,\n        \"created_at\": \"2024-05-06T16:10:18.000Z\",\n        \"updated_at\": \"2024-05-06T16:10:18.000Z\",\n        \"deleted_at\": null\n      },\n      {\n        \"id\": 2,\n        \"userId\": 2,\n        \"created_at\": \"2024-05-06T16:10:18.000Z\",\n        \"updated_at\": \"2024-05-06T16:10:18.000Z\",\n        \"deleted_at\": null\n      }\n    ]\n  },\n  {\n    \"id\": 3,\n    \"userEmail\": \"user3@example.com\",\n    \"password\": \"password123\",\n    \"created_at\": \"2024-05-06T16:08:37.000Z\",\n    \"updated_at\": \"2024-05-06T16:08:37.000Z\",\n    \"deleted_at\": null,\n    \"payment\": [\n      {\n        \"id\": 5,\n        \"userId\": 3,\n        \"created_at\": \"2024-05-06T16:10:18.000Z\",\n        \"updated_at\": \"2024-05-06T16:10:18.000Z\",\n        \"deleted_at\": null\n      }\n    ]\n  },\n  {\n    \"id\": 4,\n    \"userEmail\": \"user4@example.com\",\n    \"password\": \"password123\",\n    \"created_at\": \"2024-05-06T16:08:37.000Z\",\n    \"updated_at\": \"2024-05-06T16:08:37.000Z\",\n    \"deleted_at\": null,\n    \"payment\": []\n  },\n  {\n    \"id\": 5,\n    \"userEmail\": \"user5@example.com\",\n    \"password\": \"password123\",\n    \"created_at\": \"2024-05-06T16:08:37.000Z\",\n    \"updated_at\": \"2024-05-06T16:08:37.000Z\",\n    \"deleted_at\": null,\n    \"payment\": []\n  }\n]\n```\n"},{"excerpt":"Feature Image Upload 서버에서 Sharp 라이브러리를 사용해 Content-type 변경하는 기능 구현 Situation 기존 운영중인 서비스은 S3에 이미지 업로드 할 때, image/jpg로 업로드됩니다.\nJPG는 PNG에 비해 작은 용량의 크기로 사진을 압축할 수 있지만 WebP와 비교했을 때 화질면에서 크게 떨어집니다.\n또한, We…","fields":{"slug":"/image-upload/"},"frontmatter":{"date":"April 03, 2021","title":"이미지 업로드 성능 개선","tags":["min"]},"rawMarkdownBody":"\n# Feature\n\nImage Upload 서버에서 Sharp 라이브러리를 사용해 Content-type 변경하는 기능 구현\n\n## Situation\n\n기존 운영중인 서비스은 S3에 이미지 업로드 할 때, image/jpg로 업로드됩니다.\nJPG는 PNG에 비해 작은 용량의 크기로 사진을 압축할 수 있지만 WebP와 비교했을 때 화질면에서 크게 떨어집니다.\n또한, Webp는 PNG에 비해 크기가 26%, JPEG 이미지보다 25~34% 더 작습니다.\n\n> 출처 : https://developers.google.com/speed/webp?hl=ko\n\n## Task\n\n- 업로드 할 이미지의 용량 축소 기능 구현\n- Sharp 라이브러리를 활용하여 이미지의 Content-Type을 image/webp 로 변환\n\n## Action\n\n- 이미지 업로드 API의 서비스 로직에 Sharp 라이브러리로 Image의 Buffer를 webp로 변환\n- 이미지 파일의 확장자를 .webp로 변환\n- S3 업로드 시, ContentType을 image/webp로 설정\n\n## Result\n\n테스트 결과 -> 파일 A, 파일 B\n\n> png 파일 업로드 -> 131.2 KB, 333.5 KB <br>\n> jpeg 파일 업로드 -> 86.0 KB, 241.8 KB <br> > **webp 파일 업로드 -> 50.9 KB, 128.2 KB** <br>\n\n로 webp 변환 시 저장 공간에 대한 효율성을 향상시킬 수 있습니다.\n이는 업로드에 대한 성능 뿐만 아니라, 실제 클라이언트에게 이미지 파일이 전달될 때에 확실한 성능 차이가 보여질 것으로 판단됩니다.\n\n<img width=\"1157\" alt=\"upload_test\" src=\"https://github.com/EeeasyCode/nest-study/assets/92606611/e605cf3b-8069-44bd-922d-dc6e3e5d9235\">\n"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}