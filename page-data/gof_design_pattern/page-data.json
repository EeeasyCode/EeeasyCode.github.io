{"componentChunkName":"component---src-templates-post-jsx","path":"/gof_design_pattern/","result":{"data":{"site":{"siteMetadata":{"title":"Changmin"}},"markdownRemark":{"id":"7e26500c-a1ce-5350-90bf-5a547efed379","excerpt":"객체 지향 설계와 디자인 패턴: 핵심 정리 소프트웨어 개발에서 객체 지향 설계(OOD, Object-Oriented Design)는 단순히 현재의 문제를 해결하는 것을 넘어 재사용성과 확장성을 고려한 설계가 핵심임. 이를 실현하기 위해 숙련된 개발자들이 반복적으로 마주한 문제와 그 해법을 정리한 것이 바로 디자인 패턴(Design Pattern) 임. 어…","html":"<h1 id=\"객체-지향-설계와-디자인-패턴-핵심-정리\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%EC%84%A4%EA%B3%84%EC%99%80-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%ED%95%B5%EC%8B%AC-%EC%A0%95%EB%A6%AC\" aria-label=\"객체 지향 설계와 디자인 패턴 핵심 정리 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>객체 지향 설계와 디자인 패턴: 핵심 정리</h1>\n<p>소프트웨어 개발에서 객체 지향 설계(OOD, Object-Oriented Design)는 단순히 현재의 문제를 해결하는 것을 넘어 재사용성과 확장성을 고려한 설계가 핵심임. 이를 실현하기 위해 숙련된 개발자들이 반복적으로 마주한 문제와 그 해법을 정리한 것이 바로 <strong>디자인 패턴(Design Pattern)</strong> 임.</p>\n<p>어떤 상황에 대한 문제가 동일하게 발생했을 때 같은 방법으로 해결할 수 있다? -> 디자인 패턴</p>\n<h2 id=\"디자인-패턴의-정의\" style=\"position:relative;\"><a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-label=\"디자인 패턴의 정의 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>디자인 패턴의 정의</h2>\n<p>디자인 패턴은 특정한 상황에서 반복적으로 발생하는 문제를 해결하기 위한 설계의 핵심 아이디어를 제공함. 이는 특정 코드 구현이 아닌, 구조적 설계 템플릿으로 이해할 수 있음.</p>\n<h3 id=\"디자인-패턴의-구성-요소\" style=\"position:relative;\"><a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4%EC%9D%98-%EA%B5%AC%EC%84%B1-%EC%9A%94%EC%86%8C\" aria-label=\"디자인 패턴의 구성 요소 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>디자인 패턴의 구성 요소</h3>\n<ol>\n<li><strong>이름(Name)</strong> : 패턴의 명칭. 설계 의사소통을 간결하게 함.</li>\n<li><strong>문제(Problem)</strong> : 패턴이 해결하고자 하는 문제 및 발생 맥락.</li>\n<li><strong>해법(Solution)</strong> : 설계를 구성하는 클래스와 객체 간 관계를 정의.</li>\n<li><strong>결과(Consequences)</strong> : 패턴 적용 시 기대되는 결과와 트레이드오프.</li>\n</ol>\n<p>일단 이 책에서 뭔가 디자인 패턴에 대한 이야기를 할 때, 이 4가지 구성요소를 생각하며 보면 뭔가 다르게 보이지 않을까?</p>\n<h2 id=\"디자인-패턴의-분류\" style=\"position:relative;\"><a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4%EC%9D%98-%EB%B6%84%EB%A5%98\" aria-label=\"디자인 패턴의 분류 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>디자인 패턴의 분류</h2>\n<ol>\n<li>\n<p><strong>생성(Creational) 패턴</strong>: 객체 생성 과정을 캡슐화하여 객체 생성을 유연하게 설계함.</p>\n<ul>\n<li>예: Factory Method, Singleton</li>\n</ul>\n</li>\n<li>\n<p><strong>구조(Structural) 패턴</strong>: 클래스와 객체를 결합해 더 큰 구조를 형성함.</p>\n<ul>\n<li>예: Adapter, Decorator</li>\n</ul>\n</li>\n<li>\n<p><strong>행동(Behavioral) 패턴</strong>: 객체 간의 책임 분배와 상호작용 방식을 정의함.</p>\n<ul>\n<li>예: Observer, Strategy</li>\n</ul>\n</li>\n</ol>\n<p>어쨌든 디자인 패턴은 객체 지향 관점에서의 패턴들이니까, 객체 지향적인 사고도 함께 가져가야 한다.\n내가 마주한 문제가 어떤 패턴에 속하는지 판단하는 게 패턴 적용의 첫번째일듯</p>\n<h3 id=\"분류-기준\" style=\"position:relative;\"><a href=\"#%EB%B6%84%EB%A5%98-%EA%B8%B0%EC%A4%80\" aria-label=\"분류 기준 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>분류 기준</h3>\n<p>첫번째는 목적 (생성/구조/행동)</p>\n<p>두번째는 범위 (클래스/객체)</p>\n<ul>\n<li>클래스 : 클래스 간의 관계를 다룸. 주로 상속을 통해 클래스 간의 <strong>정적인 관계</strong>를 정의</li>\n<li>객체 : 객체 간의 관계를 다룸. 주로 합성을 통해 객체 간의 <strong>동적인 관계</strong>를 정의</li>\n</ul>\n<p>패턴 간 참조관계는 일단 넘어가야겠다 (언젠간 완전히 이해하겠지)</p>\n<h2 id=\"디자인-패턴을-사용하는-이유\" style=\"position:relative;\"><a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"디자인 패턴을 사용하는 이유 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>디자인 패턴을 사용하는 이유</h2>\n<ol>\n<li><strong>재사용성 향상</strong> : 검증된 설계 패턴을 재사용해 생산성과 품질을 높임.</li>\n<li><strong>설계 의도 명확화</strong> : 클래스와 객체 간의 상호작용을 명확히 정의함.</li>\n<li><strong>유지보수 용이</strong> : 변경 가능한 요소를 캡슐화해 코드 변경 비용을 감소시킴.</li>\n</ol>\n<h2 id=\"디자인-패턴으로-문제를-푸는-방법\" style=\"position:relative;\"><a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4%EC%9C%BC%EB%A1%9C-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%91%B8%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"디자인 패턴으로 문제를 푸는 방법 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>디자인 패턴으로 문제를 푸는 방법</h2>\n<ol>\n<li>\n<p><strong>적절한 객체와 인터페이스 설계</strong></p>\n<ul>\n<li>객체의 크기와 역할을 정의하고, 인터페이스를 기반으로 다형성을 설계함.</li>\n<li>예: Dynamic Binding(동적 바인딩)과 Polymorphism(다형성) 활용.</li>\n</ul>\n</li>\n<li>\n<p><strong>구현과 인터페이스 분리</strong></p>\n<ul>\n<li>구현에 의존하지 않고 인터페이스에 의존하는 설계를 지향함.</li>\n<li>예: 구체 클래스 대신 추상 클래스나 인터페이스 사용.</li>\n</ul>\n</li>\n<li>\n<p><strong>상속보다 합성 활용</strong></p>\n<ul>\n<li>상속 대신 객체 합성을 통해 유연성을 높이고 캡슐화를 유지함.</li>\n<li>예: 위임(Delegation) 패턴.</li>\n</ul>\n</li>\n</ol>\n<p>1.6 디자인 패턴을 이용하여 문제를 푸는 방법을 쭉 읽어보니 머릿속에 하나 들었던 생각은 \"결국 <strong>객체 지향적인 사고</strong>와 <strong>적절한 추상화</strong>를 통해 유연함을 가져오는 것을 설계하는 것이구나.\" 였다.</p>\n<h2 id=\"디자인-패턴을-고르는-방법\" style=\"position:relative;\"><a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4%EC%9D%84-%EA%B3%A0%EB%A5%B4%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"디자인 패턴을 고르는 방법 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>디자인 패턴을 고르는 방법</h2>\n<ol>\n<li><strong>문제를 정의</strong> : 해결하려는 문제가 무엇인지 명확히 파악함.</li>\n<li><strong>패턴의 의도 확인</strong> : 각 패턴의 목적과 상황을 비교해 적합성을 평가함.</li>\n<li><strong>패턴 간 관계 탐구</strong> : 서로 관련된 패턴(대체 가능, 함께 사용 가능 등)을 고려함.</li>\n<li><strong>비슷한 패턴을 모아 학습</strong> : 패턴들 간 유사점과 참이점을 이해함.</li>\n<li><strong>재설계 원인 파악</strong> : 재설계 원인과 해결을 위한 패턴을 이해함.</li>\n<li><strong>가변성 설계</strong> : 변화가 예상되는 요소를 캡슐화하여 재설계 비용을 줄임.</li>\n</ol>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>결론</h2>\n<p>디자인 패턴은 소프트웨어 설계의 표준화된 해법으로, 복잡한 설계를 단순화하고 코드의 품질과 유지보수성을 높이는 데 필수적임. 패턴을 올바르게 적용하면 더 유연하고 확장 가능한 소프트웨어를 설계할 수 있음.</p>\n<p>추상화가 왜 필요할까?\n협업을 하고 프로젝트를 구현하는데에 추상화는 어떤 도움을 줄까?</p>","frontmatter":{"title":"GoF Design Pattern - 1장","date":"January 24, 2025","update":null,"tags":["Design Pattern","OOP"],"series":"GoF Design Pattern"},"fields":{"slug":"/gof_design_pattern/","readingTime":{"minutes":6.635}}},"seriesList":{"edges":[{"node":{"id":"7e26500c-a1ce-5350-90bf-5a547efed379","fields":{"slug":"/gof_design_pattern/"},"frontmatter":{"title":"GoF Design Pattern - 1장"}}}]},"previous":{"fields":{"slug":"/lambda-exectution-environment/"},"frontmatter":{"title":"AWS Lambda의 Execution Environment 이해하기"}},"next":{"fields":{"slug":"/nestjs/"},"frontmatter":{"title":"NestJS Deep Dive"}}},"pageContext":{"id":"7e26500c-a1ce-5350-90bf-5a547efed379","series":"GoF Design Pattern","previousPostId":"05a8a703-fcaa-5315-a4ba-514eda2a381e","nextPostId":"59e80cb2-caf7-518e-b3d8-1b7d7c2a3fc3"}},"staticQueryHashes":[],"slicesMap":{}}